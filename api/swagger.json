{
  "openapi": "3.0.0",
  "info": {
    "title": "React Node Template API",
    "description": "REST API description",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5000",
      "description": "Development server"
    },
    {
      "url": "https://api.example.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Health check endpoint",
        "description": "Used by OpenShift to verify if the server is up",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Success"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Retrieve a list of all users in the system",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "Successfully retrieved users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User list retrieved successfully"
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user",
        "description": "Create a new user with the provided information",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User found"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/UserNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update an existing user's information",
        "operationId": "updateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParam"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/UserNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete a user from the system",
        "operationId": "deleteUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/UserNotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the user",
            "example": 1
          },
          "firstName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "description": "User's first name",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "nullable": true,
            "description": "User's middle name (optional)",
            "example": "William"
          },
          "lastName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "description": "User's last name",
            "example": "Doe"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "User's date of birth in YYYY-MM-DD format",
            "example": "1990-01-15"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created",
            "example": "2023-08-21T10:30:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated",
            "example": "2023-08-21T10:30:00Z"
          }
        },
        "required": ["id", "firstName", "lastName", "dateOfBirth"]
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "description": "User's first name (letters and spaces only)",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "nullable": true,
            "description": "User's middle name (optional, letters and spaces only)",
            "example": "William"
          },
          "lastName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "description": "User's last name (letters and spaces only)",
            "example": "Doe"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "User's date of birth in YYYY-MM-DD format",
            "example": "1990-01-15"
          }
        },
        "required": ["firstName", "lastName", "dateOfBirth"]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "description": "User's first name (letters and spaces only)",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "nullable": true,
            "description": "User's middle name (optional, letters and spaces only)",
            "example": "William"
          },
          "lastName": {
            "type": "string",
            "maxLength": 50,
            "pattern": "^[a-zA-Z ]+$",
            "description": "User's last name (letters and spaces only)",
            "example": "Doe"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "User's date of birth in YYYY-MM-DD format",
            "example": "1990-01-15"
          }
        },
        "required": ["dateOfBirth"]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "example": 400
          },
          "error": {
            "type": "string",
            "example": "Bad Request"
          },
          "message": {
            "type": "string",
            "example": "Validation failed"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "\"firstName\" is required"
                },
                "path": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": ["firstName"]
                },
                "type": {
                  "type": "string",
                  "example": "any.required"
                }
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Something went wrong"
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 500
          }
        }
      }
    },
    "parameters": {
      "UserIdParam": {
        "name": "userId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "description": "Unique identifier of the user",
        "example": 1
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - Invalid data provided",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Invalid data",
              "statusCode": 400
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error - Request data does not meet requirements",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "UserNotFound": {
        "description": "User not found - The specified user does not exist",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "User not found",
              "statusCode": 404
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error - Something went wrong on the server",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Internal server error",
              "statusCode": 500
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Health check operations"
    },
    {
      "name": "Users",
      "description": "User management operations"
    }
  ]
}